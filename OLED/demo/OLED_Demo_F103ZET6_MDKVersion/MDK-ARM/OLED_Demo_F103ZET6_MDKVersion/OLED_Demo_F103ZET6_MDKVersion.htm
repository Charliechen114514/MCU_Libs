<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [OLED_Demo_F103ZET6_MDKVersion\OLED_Demo_F103ZET6_MDKVersion.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image OLED_Demo_F103ZET6_MDKVersion\OLED_Demo_F103ZET6_MDKVersion.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Feb 05 21:26:51 2025
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; test_graphic_softspi_functionalities &rArr; __test_common &rArr; on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[90]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f1xx_1.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[50]">__pvt_append_text</a> from ccgraphic_textedit.o(i.__pvt_append_text) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[61]">__pvt_backParent</a> from ccgraphic_menu.o(i.__pvt_backParent) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[51]">__pvt_clear_text</a> from ccgraphic_textedit.o(i.__pvt_clear_text) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[62]">__pvt_doByStep</a> from ccgraphic_menu.o(i.__pvt_doByStep) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[60]">__pvt_enterSub</a> from ccgraphic_menu.o(i.__pvt_enterSub) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[4f]">__pvt_hide</a> from ccgraphic_frame.o(i.__pvt_hide) referenced from ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
 <LI><a href="#[55]">__pvt_hide</a> from ccgraphic_textedit.o(i.__pvt_hide) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[5e]">__pvt_hideIcon</a> from ccgraphic_menu.o(i.__pvt_hideIcon) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[58]">__pvt_hide_CCGraphic_Menu</a> from ccgraphic_menu.o(i.__pvt_hide_CCGraphic_Menu) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[52]">__pvt_newLine_text</a> from ccgraphic_textedit.o(i.__pvt_newLine_text) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[54]">__pvt_relocate</a> from ccgraphic_textedit.o(i.__pvt_relocate) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[70]">__pvt_send_command</a> from soft_spi.o(i.__pvt_send_command) referenced from soft_spi.o(i.oled_bind_softspi_pack)
 <LI><a href="#[71]">__pvt_send_data</a> from soft_spi.o(i.__pvt_send_data) referenced from soft_spi.o(i.oled_bind_softspi_pack)
 <LI><a href="#[5c]">__pvt_setAnimationShowState_wrapper</a> from ccgraphic_menu.o(i.__pvt_setAnimationShowState_wrapper) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[5d]">__pvt_setIcon</a> from ccgraphic_menu.o(i.__pvt_setIcon) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[53]">__pvt_setText</a> from ccgraphic_textedit.o(i.__pvt_setText) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[4e]">__pvt_show</a> from ccgraphic_frame.o(i.__pvt_show) referenced from ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
 <LI><a href="#[56]">__pvt_show</a> from ccgraphic_textedit.o(i.__pvt_show) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[5f]">__pvt_showIcon</a> from ccgraphic_menu.o(i.__pvt_showIcon) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[59]">__pvt_show_CCGraphic_Menu</a> from ccgraphic_menu.o(i.__pvt_show_CCGraphic_Menu) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[5b]">__pvt_switchIndex</a> from ccgraphic_menu.o(i.__pvt_switchIndex) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[4d]">__pvt_update</a> from ccgraphic_frame.o(i.__pvt_update) referenced from ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
 <LI><a href="#[5a]">__pvt_update</a> from ccgraphic_menu.o(i.__pvt_update) referenced from ccgraphic_menu.o(i.CCGraphic_init_Menu)
 <LI><a href="#[57]">__pvt_update_text</a> from ccgraphic_textedit.o(i.__pvt_update_text) referenced from ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[67]">clear_area_device_oled</a> from ccgraphic_device_oled_adapter.o(i.clear_area_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[64]">clear_device_oled</a> from ccgraphic_device_oled_adapter.o(i.clear_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6e]">close_device_oled</a> from ccgraphic_device_oled_adapter.o(i.close_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6b]">draw_area_device_oled</a> from ccgraphic_device_oled_adapter.o(i.draw_area_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[63]">init_device_oled</a> from ccgraphic_device_oled_adapter.o(i.init_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6d]">open_device_oled</a> from ccgraphic_device_oled_adapter.o(i.open_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6c]">property_fetcher_device_oled</a> from ccgraphic_device_oled_adapter.o(i.property_fetcher_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[68]">reverse_device_oled</a> from ccgraphic_device_oled_adapter.o(i.reverse_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[69]">reversearea_device_oled</a> from ccgraphic_device_oled_adapter.o(i.reversearea_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6f]">set_property_device_oled</a> from ccgraphic_device_oled_adapter.o(i.set_property_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[65]">setpixel_device_oled</a> from ccgraphic_device_oled_adapter.o(i.setpixel_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[6a]">update_area_device_oled</a> from ccgraphic_device_oled_adapter.o(i.update_area_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
 <LI><a href="#[66]">update_device_oled</a> from ccgraphic_device_oled_adapter.o(i.update_device_oled) referenced from ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[12c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[77]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[12d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[130]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[131]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[132]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[133]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[134]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[135]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[136]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[137]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[138]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[140]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[141]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[142]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[143]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[74]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[79]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; test_graphic_softspi_functionalities &rArr; __test_common &rArr; on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[91]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[80]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[82]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[84]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
</UL>

<P><STRONG><a name="[87]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[78]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_softspi_handle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_clear_frame
</UL>

<P><STRONG><a name="[8a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[14f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[95]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
</UL>

<P><STRONG><a name="[152]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[8e]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[89]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[86]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[4b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[155]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[158]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[83]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[159]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>CCGraphicWidget_AsciiTextItem_on_newLine_point</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_AsciiTextItem_on_newLine_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCGraphicWidget_AsciiTextItem_on_newLine_point
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_newLine_text
</UL>

<P><STRONG><a name="[de]"></a>CCGraphicWidget_AsciiTextItem_relocate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_AsciiTextItem_relocate))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_relocate
</UL>

<P><STRONG><a name="[cd]"></a>CCGraphicWidget_AsciiTextItem_setAsciiText</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_AsciiTextItem_setAsciiText))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setText
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_newLine_text
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_append_text
</UL>

<P><STRONG><a name="[db]"></a>CCGraphicWidget_AsciiTextItem_setIndexedPoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_AsciiTextItem_setIndexedPoint))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setText
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_newLine_text
</UL>

<P><STRONG><a name="[9b]"></a>CCGraphicWidget_MaxAcceptable_Size</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ccgraphicwidget_base.o(i.CCGraphicWidget_MaxAcceptable_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CCGraphicWidget_MaxAcceptable_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_createDeviceFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[94]"></a>CCGraphicWidget_drawAsciiTextItem</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_drawAsciiTextItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CCGraphicWidget_drawAsciiTextItem &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_fetch_valid_final_point
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_draw_char_each
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
</UL>

<P><STRONG><a name="[99]"></a>CCGraphicWidget_drawAsciiTextItem_with_finPoint</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_drawAsciiTextItem_with_finPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CCGraphicWidget_drawAsciiTextItem_with_finPoint &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_fetch_valid_final_point
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_draw_char_each
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
</UL>

<P><STRONG><a name="[d0]"></a>CCGraphicWidget_draw_image</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ccgraphic_image.o(i.CCGraphicWidget_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCGraphicWidget_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_image
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_draw_char_each
</UL>

<P><STRONG><a name="[e1]"></a>CCGraphicWidget_init_AsciiTextItem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ccgraphic_textitem.o(i.CCGraphicWidget_init_AsciiTextItem))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[104]"></a>CCGraphicWidget_init_image</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_image.o(i.CCGraphicWidget_init_image))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_image
</UL>

<P><STRONG><a name="[9a]"></a>CCGraphic_createDeviceFrame</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ccgraphic_frame.o(i.CCGraphic_createDeviceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCGraphic_createDeviceFrame &rArr; CCGraphicWidget_MaxAcceptable_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_MaxAcceptable_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_frame_test
</UL>

<P><STRONG><a name="[9c]"></a>CCGraphic_draw_arc</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ccgraphic_arc.o(i.CCGraphic_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CCGraphic_draw_arc &rArr; __pvt_is_in_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_arc
</UL>

<P><STRONG><a name="[9f]"></a>CCGraphic_draw_circle</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, ccgraphic_circle.o(i.CCGraphic_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CCGraphic_draw_circle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_circle
</UL>

<P><STRONG><a name="[a0]"></a>CCGraphic_draw_ellipse</STRONG> (Thumb, 674 bytes, Stack size 104 bytes, ccgraphic_ellipse.o(i.CCGraphic_draw_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CCGraphic_draw_ellipse &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ellipse
</UL>

<P><STRONG><a name="[a9]"></a>CCGraphic_draw_line</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ccgraphic_line.o(i.CCGraphic_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCGraphic_draw_line &rArr; __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_uint16
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_uint16
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_BresenhamMethod_line
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_rectangle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_line
</UL>

<P><STRONG><a name="[9e]"></a>CCGraphic_draw_point</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccgraphic_point.o(i.CCGraphic_draw_point))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_rectangle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_BresenhamMethod_line
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_circle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_circle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_arc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_points
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_triangle
</UL>

<P><STRONG><a name="[ad]"></a>CCGraphic_draw_rectangle</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ccgraphic_rectangle.o(i.CCGraphic_draw_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CCGraphic_draw_rectangle &rArr; CCGraphic_draw_line &rArr; __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_line
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_rectangle
</UL>

<P><STRONG><a name="[af]"></a>CCGraphic_drawfilled_circle</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, ccgraphic_circle.o(i.CCGraphic_drawfilled_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CCGraphic_drawfilled_circle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_circle
</UL>

<P><STRONG><a name="[b0]"></a>CCGraphic_drawfilled_ellipse</STRONG> (Thumb, 856 bytes, Stack size 104 bytes, ccgraphic_ellipse.o(i.CCGraphic_drawfilled_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CCGraphic_drawfilled_ellipse &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ellipse
</UL>

<P><STRONG><a name="[b1]"></a>CCGraphic_drawfilled_rectangle</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ccgraphic_rectangle.o(i.CCGraphic_drawfilled_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CCGraphic_drawfilled_rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_rectangle
</UL>

<P><STRONG><a name="[b2]"></a>CCGraphic_drawfilled_triangle</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ccgraphic_triangle.o(i.CCGraphic_drawfilled_triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CCGraphic_drawfilled_triangle &rArr; __pvt_is_in_triangle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_int16min
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_int16max
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_triangle
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_triangle
</UL>

<P><STRONG><a name="[e2]"></a>CCGraphic_init_CCGraphicTextEdit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[101]"></a>CCGraphic_init_CCGraphic_Arc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ccgraphic_arc.o(i.CCGraphic_init_CCGraphic_Arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCGraphic_init_CCGraphic_Arc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_arc
</UL>

<P><STRONG><a name="[b6]"></a>CCGraphic_init_Menu</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ccgraphic_menu.o(i.CCGraphic_init_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CCGraphic_init_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
</UL>

<P><STRONG><a name="[102]"></a>CCGraphic_init_circle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_circle.o(i.CCGraphic_init_circle))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_circle
</UL>

<P><STRONG><a name="[103]"></a>CCGraphic_init_ellipse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccgraphic_ellipse.o(i.CCGraphic_init_ellipse))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ellipse
</UL>

<P><STRONG><a name="[ae]"></a>CCGraphic_init_line</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_line.o(i.CCGraphic_init_line))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_rectangle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_line
</UL>

<P><STRONG><a name="[105]"></a>CCGraphic_init_point</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_point.o(i.CCGraphic_init_point))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_points
</UL>

<P><STRONG><a name="[106]"></a>CCGraphic_init_rectangle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_rectangle.o(i.CCGraphic_init_rectangle))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_rectangle
</UL>

<P><STRONG><a name="[107]"></a>CCGraphic_init_triangle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccgraphic_triangle.o(i.CCGraphic_init_triangle))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_triangle
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_oled_spi_functionalities
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_frame_test
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__helper_on_set_text
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_init_soft_spi_gpio_init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_init_soft_spi_gpio_init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_send_data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_send_command
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_init_soft_spi_gpio_init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c3]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>MX_GPIO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SystemClock_Config</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx_1.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[93]"></a>__fetch_font_size</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ccgraphic_textconfig.o(i.__fetch_font_size))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_Menu
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_draw_char_each
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_on_newLine_point
</UL>

<P><STRONG><a name="[c7]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c8]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[ca]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[cb]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[ac]"></a>__pvt_BresenhamMethod_line</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, ccgraphic_line.o(i.__pvt_BresenhamMethod_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int16
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
</UL>

<P><STRONG><a name="[ce]"></a>__pvt_do_stepped_animate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_do_stepped_animate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __pvt_do_stepped_animate &rArr; __pvt_doByStep
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_doByStep
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_switchIndex
</UL>

<P><STRONG><a name="[58]"></a>__pvt_hide_CCGraphic_Menu</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ccgraphic_menu.o(i.__pvt_hide_CCGraphic_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __pvt_hide_CCGraphic_Menu &rArr; __pvt_hideIcon &rArr; __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hideIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[dc]"></a>__pvt_oled_set_cursor</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, oled_base_driver_ssd1309.o(i.__pvt_oled_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_fetch_oled_table
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update_area
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
</UL>

<P><STRONG><a name="[59]"></a>__pvt_show_CCGraphic_Menu</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ccgraphic_menu.o(i.__pvt_show_CCGraphic_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __pvt_show_CCGraphic_Menu &rArr; __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show_textEditOnly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[d4]"></a>__pvt_show_textEditOnly</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_show_textEditOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show_CCGraphic_Menu
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hideIcon
</UL>

<P><STRONG><a name="[100]"></a>__register_paintdevice</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ccgraphic_device_adapter.o(i.__register_paintdevice))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_soft_spi_setup
</UL>

<P><STRONG><a name="[cf]"></a>__select_from_ascii_font_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ccgraphic_textconfig.o(i.__select_from_ascii_font_size))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_draw_char_each
</UL>

<P><STRONG><a name="[ef]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[d8]"></a>atan2</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
</UL>

<P><STRONG><a name="[67]"></a>clear_area_device_oled</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ccgraphic_device_oled_adapter.o(i.clear_area_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = clear_area_device_oled &rArr; oled_helper_clear_area
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_clear_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[64]"></a>clear_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.clear_device_oled))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_clear_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[6e]"></a>close_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.close_device_oled))
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[f5]"></a>close_oled</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oled_base_driver_ssd1309.o(i.close_oled), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_fetch_oled_table
</UL>

<P><STRONG><a name="[6b]"></a>draw_area_device_oled</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ccgraphic_device_oled_adapter.o(i.draw_area_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = draw_area_device_oled &rArr; oled_helper_draw_area &rArr; oled_helper_clear_area
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_draw_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[b4]"></a>find_int16max</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ccgraphic_utils.o(i.find_int16max))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_int16max
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_triangle
</UL>

<P><STRONG><a name="[b3]"></a>find_int16min</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ccgraphic_utils.o(i.find_int16min))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_int16min
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_triangle
</UL>

<P><STRONG><a name="[63]"></a>init_device_oled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.init_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_device_oled &rArr; oled_init_softspi_handle &rArr; oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_softspi_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = main &rArr; test_graphic_softspi_functionalities &rArr; __test_common &rArr; on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_oled_spi_functionalities
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_graphic_softspi_functionalities
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[aa]"></a>max_uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccgraphic_utils.o(i.max_uint16))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
</UL>

<P><STRONG><a name="[ab]"></a>min_uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccgraphic_utils.o(i.min_uint16))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
</UL>

<P><STRONG><a name="[fb]"></a>oled_bind_softspi_pack</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, soft_spi.o(i.oled_bind_softspi_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = oled_bind_softspi_pack &rArr; __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_init_soft_spi_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_soft_spi_oled_handle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_soft_spi_setup
</UL>

<P><STRONG><a name="[10b]"></a>oled_height</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.oled_height))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_fetcher_device_oled
</UL>

<P><STRONG><a name="[f3]"></a>oled_helper_clear_area</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, oled_base_driver_ssd1309.o(i.oled_helper_clear_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oled_helper_clear_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_draw_area
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_area_device_oled
</UL>

<P><STRONG><a name="[f4]"></a>oled_helper_clear_frame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.oled_helper_clear_frame))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_device_oled
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clear
</UL>

<P><STRONG><a name="[f6]"></a>oled_helper_draw_area</STRONG> (Thumb, 174 bytes, Stack size 44 bytes, oled_base_driver_ssd1309.o(i.oled_helper_draw_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_helper_draw_area &rArr; oled_helper_clear_area
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_clear_area
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_area_device_oled
</UL>

<P><STRONG><a name="[10d]"></a>oled_helper_reverse</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled_base_driver_ssd1309.o(i.oled_helper_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_helper_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_device_oled
</UL>

<P><STRONG><a name="[10e]"></a>oled_helper_reversearea</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, oled_base_driver_ssd1309.o(i.oled_helper_reversearea))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oled_helper_reversearea
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reversearea_device_oled
</UL>

<P><STRONG><a name="[10f]"></a>oled_helper_setpixel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled_base_driver_ssd1309.o(i.oled_helper_setpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_helper_setpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpixel_device_oled
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_set_pixel_line
</UL>

<P><STRONG><a name="[fd]"></a>oled_helper_update</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, oled_base_driver_ssd1309.o(i.oled_helper_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_oled_set_cursor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_fetch_oled_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_softspi_handle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_device_oled
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_set_pixel_line
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clear
</UL>

<P><STRONG><a name="[fe]"></a>oled_helper_update_area</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, oled_base_driver_ssd1309.o(i.oled_helper_update_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_helper_update_area &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_oled_set_cursor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_fetch_oled_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_area_device_oled
</UL>

<P><STRONG><a name="[f7]"></a>oled_init_softspi_handle</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, oled_base_driver_ssd1309.o(i.oled_init_softspi_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oled_init_softspi_handle &rArr; oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_oled
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_soft_spi_oled_handle
</UL>

<P><STRONG><a name="[ff]"></a>oled_soft_spi_setup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, soft_spi_fast_setup.o(i.oled_soft_spi_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = oled_soft_spi_setup &rArr; oled_bind_softspi_pack &rArr; __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__register_paintdevice
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_bind_softspi_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_init_softspi_oled
</UL>

<P><STRONG><a name="[10a]"></a>oled_support_rgb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.oled_support_rgb))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_fetcher_device_oled
</UL>

<P><STRONG><a name="[10c]"></a>oled_width</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.oled_width))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;property_fetcher_device_oled
</UL>

<P><STRONG><a name="[ed]"></a>on_test_component_frame_test</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, graphoc_test_components.o(i.on_test_component_frame_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_test_component_frame_test &rArr; CCGraphic_createDeviceFrame &rArr; CCGraphicWidget_MaxAcceptable_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_createDeviceFrame
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[ee]"></a>on_test_component_menu</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, graphoc_test_components.o(i.on_test_component_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_test_component_menu &rArr; CCGraphic_init_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_Menu
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_MaxAcceptable_Size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_init_AsciiTextItem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_CCGraphicTextEdit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[ec]"></a>on_test_component_textEdit_test</STRONG> (Thumb, 172 bytes, Stack size 144 bytes, graphoc_test_components.o(i.on_test_component_textEdit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_MaxAcceptable_Size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_init_AsciiTextItem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_CCGraphicTextEdit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e9]"></a>on_test_draw_arc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, graphic_test_base.o(i.on_test_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = on_test_draw_arc &rArr; CCGraphic_draw_arc &rArr; __pvt_is_in_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_CCGraphic_Arc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[eb]"></a>on_test_draw_ascii</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, graphic_test_widget.o(i.on_test_draw_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = on_test_draw_ascii &rArr; CCGraphicWidget_drawAsciiTextItem_with_finPoint &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_MaxAcceptable_Size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_init_AsciiTextItem
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setIndexedPoint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setAsciiText
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e5]"></a>on_test_draw_circle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, graphic_test_base.o(i.on_test_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_test_draw_circle &rArr; CCGraphic_drawfilled_circle
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_circle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_circle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e8]"></a>on_test_draw_ellipse</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, graphic_test_base.o(i.on_test_draw_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_test_draw_ellipse &rArr; CCGraphic_drawfilled_ellipse &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_ellipse
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[ea]"></a>on_test_draw_image</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, graphic_test_widget.o(i.on_test_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_test_draw_image &rArr; CCGraphicWidget_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_init_image
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e4]"></a>on_test_draw_line</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, graphic_test_base.o(i.on_test_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_test_draw_line &rArr; CCGraphic_draw_line &rArr; __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_line
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e3]"></a>on_test_draw_points</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, graphic_test_base.o(i.on_test_draw_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_test_draw_points
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_point
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e6]"></a>on_test_draw_rectangle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, graphic_test_base.o(i.on_test_draw_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_test_draw_rectangle &rArr; CCGraphic_draw_rectangle &rArr; CCGraphic_draw_line &rArr; __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_rectangle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_rectangle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e7]"></a>on_test_draw_triangle</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, graphic_test_base.o(i.on_test_draw_triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_test_draw_triangle &rArr; CCGraphic_drawfilled_triangle &rArr; __pvt_is_in_triangle
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_triangle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_triangle
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[108]"></a>on_test_init_softspi_oled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, graphic_test_device.o(i.on_test_init_softspi_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_test_init_softspi_oled &rArr; oled_soft_spi_setup &rArr; oled_bind_softspi_pack &rArr; __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_soft_spi_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_graphic_softspi_functionalities
</UL>

<P><STRONG><a name="[6d]"></a>open_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.open_device_oled))
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[109]"></a>open_oled</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oled_base_driver_ssd1309.o(i.open_oled), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_fetch_oled_table
</UL>

<P><STRONG><a name="[6c]"></a>property_fetcher_device_oled</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ccgraphic_device_oled_adapter.o(i.property_fetcher_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = property_fetcher_device_oled
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_width
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_support_rgb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[68]"></a>reverse_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.reverse_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reverse_device_oled &rArr; oled_helper_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_reverse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[69]"></a>reversearea_device_oled</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ccgraphic_device_oled_adapter.o(i.reversearea_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reversearea_device_oled &rArr; oled_helper_reversearea
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_reversearea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[6f]"></a>set_property_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.set_property_device_oled))
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[15c]"></a>set_property_oled</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.set_property_oled), UNUSED)

<P><STRONG><a name="[65]"></a>setpixel_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.setpixel_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setpixel_device_oled &rArr; oled_helper_setpixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_setpixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[cc]"></a>swap_int16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ccgraphic_utils.o(i.swap_int16))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_BresenhamMethod_line
</UL>

<P><STRONG><a name="[110]"></a>test_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled_test.o(i.test_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_clear &rArr; oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_clear_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_oled_spi_functionalities
</UL>

<P><STRONG><a name="[fa]"></a>test_graphic_softspi_functionalities</STRONG> (Thumb, 20 bytes, Stack size 64 bytes, test_all.o(i.test_graphic_softspi_functionalities))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = test_graphic_softspi_functionalities &rArr; __test_common &rArr; on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_init_softspi_oled
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>test_oled_spi_functionalities</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, test_all.o(i.test_oled_spi_functionalities))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = test_oled_spi_functionalities &rArr; user_init_soft_spi_oled_handle &rArr; oled_bind_softspi_pack &rArr; __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_soft_spi_oled_handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_set_pixel_line
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>test_set_pixel_line</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, oled_test.o(i.test_set_pixel_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_set_pixel_line &rArr; oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_setpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_oled_spi_functionalities
</UL>

<P><STRONG><a name="[6a]"></a>update_area_device_oled</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ccgraphic_device_oled_adapter.o(i.update_area_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_area_device_oled &rArr; oled_helper_update_area &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[66]"></a>update_device_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_device_oled_adapter.o(i.update_device_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_device_oled &rArr; oled_helper_update &rArr; __pvt_oled_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_device_adapter.o(i.__register_paintdevice)
</UL>
<P><STRONG><a name="[111]"></a>user_init_soft_spi_oled_handle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled_test_soft_spi.o(i.user_init_soft_spi_oled_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = user_init_soft_spi_oled_handle &rArr; oled_bind_softspi_pack &rArr; __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_softspi_handle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_bind_softspi_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_oled_spi_functionalities
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
</UL>

<P><STRONG><a name="[113]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[116]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[119]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[11d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[11b]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[11c]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
</UL>

<P><STRONG><a name="[11e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
</UL>

<P><STRONG><a name="[15d]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
</UL>

<P><STRONG><a name="[15e]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
</UL>

<P><STRONG><a name="[11f]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[15f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_is_in_angle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_should_be_next_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[120]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[115]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[118]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[121]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[123]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
</UL>

<P><STRONG><a name="[124]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_ellipse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_ellipse
</UL>

<P><STRONG><a name="[160]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[126]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[114]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[127]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[11a]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[c9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[129]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9d]"></a>__pvt_is_in_angle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ccgraphic_arc.o(i.__pvt_is_in_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __pvt_is_in_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_arc
</UL>

<P><STRONG><a name="[4f]"></a>__pvt_hide</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ccgraphic_frame.o(i.__pvt_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_hide
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
</UL>
<P><STRONG><a name="[4e]"></a>__pvt_show</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ccgraphic_frame.o(i.__pvt_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __pvt_show &rArr; CCGraphic_draw_rectangle &rArr; CCGraphic_draw_line &rArr; __pvt_BresenhamMethod_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_draw_rectangle
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
</UL>
<P><STRONG><a name="[4d]"></a>__pvt_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_frame.o(i.__pvt_update))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_frame.o(i.CCGraphic_createDeviceFrame)
</UL>
<P><STRONG><a name="[61]"></a>__pvt_backParent</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_backParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_backParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[62]"></a>__pvt_doByStep</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_doByStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_doByStep
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_do_stepped_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[60]"></a>__pvt_enterSub</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_enterSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_enterSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[5e]"></a>__pvt_hideIcon</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ccgraphic_menu.o(i.__pvt_hideIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __pvt_hideIcon &rArr; __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show_textEditOnly
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_provideSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_providePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hide_CCGraphic_Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[d1]"></a>__pvt_providePoint</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccgraphic_menu.o(i.__pvt_providePoint))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hideIcon
</UL>

<P><STRONG><a name="[d2]"></a>__pvt_provideSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ccgraphic_menu.o(i.__pvt_provideSize))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hideIcon
</UL>

<P><STRONG><a name="[d3]"></a>__pvt_setAnimationShowState</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ccgraphic_menu.o(i.__pvt_setAnimationShowState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __pvt_setAnimationShowState
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show_textEditOnly
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hide_CCGraphic_Menu
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState_wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hideIcon
</UL>

<P><STRONG><a name="[5c]"></a>__pvt_setAnimationShowState_wrapper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccgraphic_menu.o(i.__pvt_setAnimationShowState_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __pvt_setAnimationShowState_wrapper &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[5d]"></a>__pvt_setIcon</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ccgraphic_menu.o(i.__pvt_setIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __pvt_setIcon &rArr; __pvt_showIcon &rArr; __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_showIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[5f]"></a>__pvt_showIcon</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ccgraphic_menu.o(i.__pvt_showIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __pvt_showIcon &rArr; __pvt_show_textEditOnly &rArr; __pvt_setAnimationShowState
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show_textEditOnly
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setAnimationShowState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_provideSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_providePoint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[5b]"></a>__pvt_switchIndex</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ccgraphic_menu.o(i.__pvt_switchIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __pvt_switchIndex &rArr; __pvt_do_stepped_animate &rArr; __pvt_doByStep
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_do_stepped_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[5a]"></a>__pvt_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_menu.o(i.__pvt_update))
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_menu.o(i.CCGraphic_init_Menu)
</UL>
<P><STRONG><a name="[50]"></a>__pvt_append_text</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ccgraphic_textedit.o(i.__pvt_append_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __pvt_append_text &rArr; __pvt_show &rArr; CCGraphicWidget_drawAsciiTextItem &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setAsciiText
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[51]"></a>__pvt_clear_text</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ccgraphic_textedit.o(i.__pvt_clear_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_clear_text
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_update_text
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[55]"></a>__pvt_hide</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ccgraphic_textedit.o(i.__pvt_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_hide
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_update_text
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_relocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[52]"></a>__pvt_newLine_text</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ccgraphic_textedit.o(i.__pvt_newLine_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __pvt_newLine_text &rArr; __pvt_show &rArr; CCGraphicWidget_drawAsciiTextItem &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setIndexedPoint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setAsciiText
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_on_newLine_point
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[54]"></a>__pvt_relocate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ccgraphic_textedit.o(i.__pvt_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __pvt_relocate &rArr; __pvt_hide
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_relocate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[53]"></a>__pvt_setText</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ccgraphic_textedit.o(i.__pvt_setText))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __pvt_setText &rArr; __pvt_show &rArr; CCGraphicWidget_drawAsciiTextItem &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setIndexedPoint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_AsciiTextItem_setAsciiText
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_clear_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[56]"></a>__pvt_show</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ccgraphic_textedit.o(i.__pvt_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __pvt_show &rArr; CCGraphicWidget_drawAsciiTextItem &rArr; __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_update_text
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_setText
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_newLine_text
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_append_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[57]"></a>__pvt_update_text</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccgraphic_textedit.o(i.__pvt_update_text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_show
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_hide
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_clear_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ccgraphic_textedit.o(i.CCGraphic_init_CCGraphicTextEdit)
</UL>
<P><STRONG><a name="[97]"></a>__pvt_draw_char_each</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ccgraphic_textitem.o(i.__pvt_draw_char_each))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __pvt_draw_char_each &rArr; CCGraphicWidget_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__select_from_ascii_font_size
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
</UL>

<P><STRONG><a name="[96]"></a>__pvt_fetch_valid_final_point</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ccgraphic_textitem.o(i.__pvt_fetch_valid_final_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __pvt_fetch_valid_final_point
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
</UL>

<P><STRONG><a name="[98]"></a>__pvt_should_be_next_line</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ccgraphic_textitem.o(i.__pvt_should_be_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __pvt_should_be_next_line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fetch_font_size
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem_with_finPoint
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_drawAsciiTextItem
</UL>

<P><STRONG><a name="[b5]"></a>__pvt_is_in_triangle</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, ccgraphic_triangle.o(i.__pvt_is_in_triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __pvt_is_in_triangle
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_drawfilled_triangle
</UL>

<P><STRONG><a name="[dd]"></a>__on_fetch_oled_table</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oled_base_driver_ssd1309.o(i.__on_fetch_oled_table))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_oled
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update_area
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_helper_update
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_oled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pvt_oled_set_cursor
</UL>

<P><STRONG><a name="[d5]"></a>__pvt_init_soft_spi_gpio_init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, soft_spi.o(i.__pvt_init_soft_spi_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __pvt_init_soft_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_bind_softspi_pack
</UL>

<P><STRONG><a name="[70]"></a>__pvt_send_command</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, soft_spi.o(i.__pvt_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __pvt_send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_spi.o(i.oled_bind_softspi_pack)
</UL>
<P><STRONG><a name="[71]"></a>__pvt_send_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, soft_spi.o(i.__pvt_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __pvt_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft_spi.o(i.oled_bind_softspi_pack)
</UL>
<P><STRONG><a name="[c6]"></a>__helper_on_set_text</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_all.o(i.__helper_on_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __helper_on_set_text &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__test_common
</UL>

<P><STRONG><a name="[e0]"></a>__test_common</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, test_all.o(i.__test_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __test_common &rArr; on_test_component_textEdit_test &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_MaxAcceptable_Size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_textEdit_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_menu
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_component_frame_test
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_image
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ascii
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_triangle
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_rectangle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_points
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_line
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_ellipse
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_circle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_draw_arc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphicWidget_init_AsciiTextItem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCGraphic_init_CCGraphicTextEdit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__helper_on_set_text
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_graphic_softspi_functionalities
</UL>

<P><STRONG><a name="[bf]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[122]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[117]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[128]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[125]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
